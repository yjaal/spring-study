<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!-- 参考：https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/
    https://www.jianshu.com/p/1ded57f6c4e3https://www.jianshu.com/p/1ded57f6c4e3
    http://www.logback.cn/
    笼统的讲就是slf4j是一系列的日志接口，而log4j,logback是具体实现了的日志框架
    logger: 定义日志级别
    appender：控制日志输出目的地，一个logger可以绑定多个appender
    layout：控制日志打印格式
    根节点是 configuration，可包含0个或多个 appender，0个或多个 logger，最多一个 root(根logger)
    注意：如果将此文件命名为logback-spring.xml，那么是不会第一时间被logback识别的，首先会被spring识别
    所以我们可以使用<springProfile>，但是如果名字为logback.xml，那么第一时间就会被logback识别，
    则不能使用<springProfile>
    -->

    <!-- 属性文件:在配置文件中找到对应的配置项, spring配置文件中的配置必须要这样定义才能被logback读取到-->
    <springProperty scope="context" name="logging.pattern.console"  source="logging.pattern.console"/>
    <springProperty scope="context" name="logging.file"  source="logging.file"/>
    <springProperty scope="context" name="logging.pattern.rolling-file-name"  source="logging.pattern.rolling-file-name"/>

    <!-- 输出到文件 -->
    <appender name="fileLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高，
        所以我们使用下面的策略，可以避免输出 Error 的日志，当然一般不会将info和error日志分开打印-->
<!--        <filter class="ch.qos.logback.classic.filter.LevelFilter">-->
<!--            &lt;!&ndash;过滤 Error&ndash;&gt;-->
<!--            <level>ERROR</level>-->
<!--            &lt;!&ndash;匹配到就禁止&ndash;&gt;-->
<!--            <onMatch>DENY</onMatch>-->
<!--            &lt;!&ndash;没有匹配到就允许&ndash;&gt;-->
<!--            <onMismatch>ACCEPT</onMismatch>-->
<!--        </filter>-->
        <append>true</append>
        <!-- 日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则
            如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
            的日志改名为今天的日期。即，<File> 的日志都是当天的。 -->
        <File>${logging.file}</File>
        <!-- 滚动策略，按照时间滚动 TimeBasedRollingPolicy -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 文件路径,定义了日志的切分方式：把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间 -->
            <FileNamePattern>${logging.pattern.rolling-file-name}</FileNamePattern>
            <!--只保留最近90天的日志 -->
            <maxHistory>90</maxHistory>
            <!-- 用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志 -->
            <!--<totalSizeCap>1GB</totalSizeCap>-->
        </rollingPolicy>
        <!--日志输出编码格式化-->
        <!--<encoder> 标签包含一个必须填写的属性 class，用来指定具体的实现类，如果该类的类型是 PatternLayoutEncoder ，那么 class 属性可以不填-->
        <encoder>
            <charset>UTF-8</charset>
            <pattern>${logging.pattern.console}</pattern>
        </encoder>
    </appender>

    <!--输出到控制台-->
    <appender name="consoleLog" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <charset>UTF-8</charset>
            <pattern>${logging.pattern.console}</pattern>
        </encoder>
    </appender>
    <!--开发环境只输出到控制台，而非开发环境输出到文件-->
    <springProfile name="dev">
        <root level="info">
            <!--这就表示输出到控制台，如果不配置，则上面的appender就不会生效-->
            <appender-ref ref="consoleLog" />
        </root>
    </springProfile>
    <springProfile name="!dev">
        <root level="info">
            <appender-ref ref="consoleLog" />
            <appender-ref ref="fileLog"/>
        </root>
    </springProfile>
</configuration>